(cl:in-package :llvm.ffi)

(autowrap:c-include '(llvm autowrap-spec "llvm-3.4.h")
  :spec-path '(llvm autowrap-spec)
  :function-package :llvm
  :exclude-sources ("^/usr/include/")
  :include-definitions ("^__off_t"
                        "^off_t" "^uint64_t" "^uint8_t")

  :type-symbol-function #'llvm::llvm-foreign-type-symbol

  :exclude-constants ("LLVMLittleEndian"
                      "LLVMBigEndian")

  :symbol-exceptions (("LLVMCCallConv" . "LLVM-C-CALL-CONV")
                      ("LLVMX86StdcallCallConv" . "LLVM-X86-STDCALL-CALL-CONV")
                      ("LLVMX86FastcallCallConv" . "LLVM-X86-FASTCALL-CALL-CONV")

                      ;; Private Naming
                      ("LLVMPositionBuilder" . "%POSITION-BUILDER")
                      ("LLVMInsertIntoBuilder" . "%INSERT-INTO-BUILDER")
                      ("LLVMBuildRet" . "%BUILD-RET")
                      ("LLVMBuildInvoke" . "%BUILD-INVOKE")
                      ("LLVMBuildGEP" . "%BUILD-GEP")
                      ("LLVMBuildInBoundsGEP" . "%BUILD-IN-BOUNDS-GEP")
                      ("LLVMBuildCall" . "%BUILD-CALL")
                      ("LLVMDumpModule" . "%DUMP-MODULE")
                      ("LLVMFunctionType" . "%FUNCTION-TYPE")
                      ("LLVMStructSetBody" . "%STRUCT-SET-BODY")
                      ("LLVMPointerType" . "%POINTER-TYPE")
                      ("LLVMDumpValue" . "%DUMP-VALUE")
                      ("LLVMConstInt" . "%CONST-INT")
                      ("LLVMConstReal" . "%CONST-REAL")
                      ("LLVMConstArray" . "%CONST-ARRAY")
                      ("LLVMConstVector" . "%CONST-VECTOR")
                      ("LLVMConstGEP" . "%CONST-GEP")
                      ("LLVMConstInBoundsGEP" . "%CONST-IN-BOUNDS-GEP")
                      ("LLVMConstExtractValue" . "%CONST-EXTRACT-VALUE")
                      ("LLVMConstInsertValue" . "%CONST-INSERT-VALUE")
                      ("LLVMVerifyModule" . "%VERIFY-MODULE")
                      ("LLVMVerifyFunction" . "%VERIFY-FUNCTION")
                      ("LLVMWriteBitcodeToFileHandle" . "%WRITE-BITCODE-TO-FILE-HANDLE")
                      ("LLVMWriteBitcodeToFile" . "%WRITE-BITCODE-TO-FILE")
                      ("LLVMRunFunctionAsMain" . "%RUN-FUNCTION-AS-MAIN")
                      ("LLVMRunFunction" . "%RUN-FUNCTION")
                      ("LLVMRemoveModule" . "%REMOVE-MODULE")
                      ("LLVMFindFunction" . "%FIND-FUNCTION")
                      ("LLVMGetBasicBlocks" . "%GET-BASIC-BLOCKS")
                      ("LLVMGetParams" . "%GET-PARAMS")
                      ("LLVMDisposeMemoryBuffer" . "%DISPOSE-MEMORY-BUFFER")
                      ("LLVMDisposeModule" . "%DISPOSE-MODULE")
                      ("LLVMDisposeExecutionEngine" . "%DISPOSE-EXECUTION-ENGINE")
                      ("LLVMGetValueName" . "%GET-VALUE-NAME")

                      ;; Unused "conflicting" functions renamed as private
                      ("LLVMInsertBasicBlock" . "%INSERT-BASIC-BLOCK")
                      ("LLVMAppendBasicBlock" . "%APPEND-BASIC-BLOCK")
                      ("LLVMAddIncoming" . "%ADD-INCOMING")
                      ("LLVMConstStruct" . "%CONST-STRUCT")
                      ("LLVMConstString" . "%CONST-STRING")
                      ("LLVMInt1Type" . "%INT1-TYPE")
                      ("LLVMInt8Type" . "%INT8-TYPE")
                      ("LLVMInt16Type" . "%INT16-TYPE")
                      ("LLVMInt32Type" . "%INT32-TYPE")
                      ("LLVMInt64Type" . "%INT64-TYPE")
                      ("LLVMIntType" . "%INT-TYPE")
                      ("LLVMFloatType" . "%FLOAT-TYPE")
                      ("LLVMDoubleType" . "%DOUBLE-TYPE")
                      ("LLVMX86FP80Type" . "%X86-FP80-TYPE")
                      ("LLVMFP128Type" . "%FP128-TYPE")
                      ("LLVMGetParamTypes" . "%PARAM-TYPES")
                      ("LLVMStructType" . "%STRUCT-TYPE")
                      ("LLVMGetStructElementTypes" . "%STRUCT-ELEMENT-TYPES")
                      ("LLVMVoidType" . "%VOID-TYPE")
                      ("LLVMLabelType" . "%LABEL-TYPE")
                      ("LLVMParseBitcode" . "%PARSE-BITCODE")
                      ("LLVMPPCFP128Type" . "%PPC-FP128-TYPE")
                      ("LLVMGetBitcodeModule" . "%BITCODE-MODULE")
                      ("LLVMInitializeNativeTarget" . "%INITIALIZE-NATIVE-TARGET")
                      ("LLVMInitializeAllTargets" . "%INITIALIZE-ALL-TARGETS")
                      ("LLVMInitializeAllTargetInfos" . "%INITIALIZE-ALL-TARGET-INFOS")
                      ("LLVMRemoveModuleProvider" . "%REMOVE-MODULE-PROVIDER")

                      ;; Is* => -P naming not handled by regex
                      ("LLVMBuildIsNull" . "BUILD-NULLP")
                      ("LLVMBuildIsNotNull" . "BUILD-NOT-NULL-P")
                      ("LLVMIsDeclaration" . "DECLARATIONP")
                      ("LLVMValueIsBasicBlock" . "VALUE-IS-BASIC-BLOCK-P")

                      ;; Normalizing
                      ("LLVMContextDispose" . "DISPOSE-CONTEXT")
                      ("LLVMAddIndVarSimplifyPass" . "ADD-INDEPENDENT-VARIABLE-SIMPLIFICATION-PASS")
                      ("LLVMStoreSizeOfType" . "STORAGE-SIZE-OF-TYPE")

                      ;; Get* shortening not handled by regex
                      ("LLVMGetInsertBlock" . "INSERTION-BLOCK")
                      ("LLVMGetTypeKind" . "KIND")
                      ("LLVMGetTypeContext" . "CONTEXT")
                      ("LLVMGetIntTypeWidth" . "WIDTH")
                      ("LLVMGetPointerAddressSpace" . "ADDRESS-SPACE")
                      ("LLVMGetVectorSize" . "SIZE")
                      ("LLVMConstIntGetZExtValue" . "Z-EXT-VALUE")
                      ("LLVMConstIntGetSExtValue" . "S-EXT-VALUE")
                      ("LLVMGetFunctionCallingConv" . "FUNCTION-CALLING-CONVENTION")
                      ("LLVMGetExecutionEngineTargetData" . "TARGET-DATA")
                      ("LLVMGetSymbolName" . "SYMBOL-NAME-LLVM"))

  :symbol-regex (("Ptr" () "Pointer")
                 ("^LLVM" () "")
                 ("^Get([A-Z].*)" () "\\1")
                 ("^Is([A-Z].*)" () "\\1_P")
                 ("([0-9])([A-Z])" () "\\1_\\2")
                 ("([^_])FP(80|128)" () "\\1_FP\\2"))
  :no-accessors cl:t)
